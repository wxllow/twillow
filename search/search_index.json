{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Twillow Documentation Welcome to the Twillow docs :)","title":"Twillow Documentation"},{"location":"#twillow-documentation","text":"Welcome to the Twillow docs :)","title":"Twillow Documentation"},{"location":"module-dev/lua/","text":"Lua Module Development (Recommended) Module development with Lua is very easy and the recommended way to make modules for Twillow. However, if you can't make a module with Lua for whatever reason, you can use Python instead! Making a module First, you need to define the class which you want to make the module in. Here you can (optionally) define a name for the module. If you do not provide a name, the file name will be used. MagicBallModule = { [ 'name' ] = '8ball' -- This is used as the command prefix } Now, we can make the new function for the module that will be called when the module is loaded. This will also contain all our module's subfunctions. And then we also need a module function that returns our module! function MagicBallModule . new ( o ) local inst = {} return inst end -- Tell Twillow where the module is. Should return your module class function module () return MagicBallModule end Making commands Now, in our module, we can make functions that will be used as commands. If you do not want a function to be recognized as a command, add an underscore to the beginning. Our function can take any amount of arguments, or none at all. Our function should return a string that is in TwiML format . Let's start off by making a simple 8ball command in our magic 8ball module First, we will need to add the required imports to the beginning of our lua script. local math = require ( \"math\" ) local os = require ( \"os\" ) Also add our choices for the 8ball to pick from. You can add/remove/modify the choices as you wish at any time. -- Choices local magic8ball = { 'yes' , 'no' , 'maybe' , 'probably' , 'probably not' , 'most definitely' , 'yes, definitely' , 'definitely not' , 'no doubt' , 'i doubt it' } Finally, let's make our command! Our command will not need to accept any arguments, as it doesn't actually care what the user wants to ask the 8ball. -- `8ball` command function inst : magicball ( arg1 , arg2 , arg3 ) math.randomseed ( os.time ()) return '<Response><Message>\ud83c\udfb1 ' .. magic8ball [ math.random ( # magic8ball )] .. '</Message></Response>' end Here is our function. It makes a random seed using the current time and then returns a response of a random choice from the magic8ball list. Add the plugin into your config.toml and run Twillow to see your plugin in action! Make sure you run 8ball 8ball and not just 8ball for now! Root command If we do not have multiple commands, or we want a command that will run when there is not a valid subcommand specified, we can simply make a function in our module named _all to handle this. -- Root command (the function that will handle any call where a subcommand is missing, should return a function; Optional) function inst : _all () return inst . magicball end That's it! Now we have made our first module in Lua! Limitations For now, there is no standardized library to use for TwiML like in Python, so you will need to manually send the TwiML. Finished Module Check modules/misc/8ball.lua for the latest version. -- Magic 8ball module -- local math = require ( \"math\" ) local os = require ( \"os\" ) -- Choices local magic8ball = { 'yes' , 'no' , 'maybe' , 'probably' , 'probably not' , 'most definitely' , 'yes, definitely' , 'definitely not' , 'no doubt' , 'i doubt it' } -- Module MagicBallModule = { [ 'name' ] = '8ball' -- This is used as the command prefix } function MagicBallModule . new ( o ) local inst = {} -- `8ball` command function inst : magicball ( arg1 , arg2 , arg3 ) math.randomseed ( os.time ()) return '<Response><Message>\ud83c\udfb1 ' .. magic8ball [ math.random ( # magic8ball )] .. '</Message></Response>' end -- Root command (the function that will handle any call where a subcommand is missing, should return a function; Optional) function inst : _all () return inst . magicball end return inst end -- Tell Twillow where the module is. Should return your module class function module () return MagicBallModule end","title":"Module Development with Lua (Recommended)"},{"location":"module-dev/lua/#lua-module-development-recommended","text":"Module development with Lua is very easy and the recommended way to make modules for Twillow. However, if you can't make a module with Lua for whatever reason, you can use Python instead!","title":"Lua Module Development (Recommended)"},{"location":"module-dev/lua/#making-a-module","text":"First, you need to define the class which you want to make the module in. Here you can (optionally) define a name for the module. If you do not provide a name, the file name will be used. MagicBallModule = { [ 'name' ] = '8ball' -- This is used as the command prefix } Now, we can make the new function for the module that will be called when the module is loaded. This will also contain all our module's subfunctions. And then we also need a module function that returns our module! function MagicBallModule . new ( o ) local inst = {} return inst end -- Tell Twillow where the module is. Should return your module class function module () return MagicBallModule end","title":"Making a module"},{"location":"module-dev/lua/#making-commands","text":"Now, in our module, we can make functions that will be used as commands. If you do not want a function to be recognized as a command, add an underscore to the beginning. Our function can take any amount of arguments, or none at all. Our function should return a string that is in TwiML format . Let's start off by making a simple 8ball command in our magic 8ball module First, we will need to add the required imports to the beginning of our lua script. local math = require ( \"math\" ) local os = require ( \"os\" ) Also add our choices for the 8ball to pick from. You can add/remove/modify the choices as you wish at any time. -- Choices local magic8ball = { 'yes' , 'no' , 'maybe' , 'probably' , 'probably not' , 'most definitely' , 'yes, definitely' , 'definitely not' , 'no doubt' , 'i doubt it' } Finally, let's make our command! Our command will not need to accept any arguments, as it doesn't actually care what the user wants to ask the 8ball. -- `8ball` command function inst : magicball ( arg1 , arg2 , arg3 ) math.randomseed ( os.time ()) return '<Response><Message>\ud83c\udfb1 ' .. magic8ball [ math.random ( # magic8ball )] .. '</Message></Response>' end Here is our function. It makes a random seed using the current time and then returns a response of a random choice from the magic8ball list. Add the plugin into your config.toml and run Twillow to see your plugin in action! Make sure you run 8ball 8ball and not just 8ball for now!","title":"Making commands"},{"location":"module-dev/lua/#root-command","text":"If we do not have multiple commands, or we want a command that will run when there is not a valid subcommand specified, we can simply make a function in our module named _all to handle this. -- Root command (the function that will handle any call where a subcommand is missing, should return a function; Optional) function inst : _all () return inst . magicball end That's it! Now we have made our first module in Lua!","title":"Root command"},{"location":"module-dev/lua/#limitations","text":"For now, there is no standardized library to use for TwiML like in Python, so you will need to manually send the TwiML.","title":"Limitations"},{"location":"module-dev/lua/#finished-module","text":"Check modules/misc/8ball.lua for the latest version. -- Magic 8ball module -- local math = require ( \"math\" ) local os = require ( \"os\" ) -- Choices local magic8ball = { 'yes' , 'no' , 'maybe' , 'probably' , 'probably not' , 'most definitely' , 'yes, definitely' , 'definitely not' , 'no doubt' , 'i doubt it' } -- Module MagicBallModule = { [ 'name' ] = '8ball' -- This is used as the command prefix } function MagicBallModule . new ( o ) local inst = {} -- `8ball` command function inst : magicball ( arg1 , arg2 , arg3 ) math.randomseed ( os.time ()) return '<Response><Message>\ud83c\udfb1 ' .. magic8ball [ math.random ( # magic8ball )] .. '</Message></Response>' end -- Root command (the function that will handle any call where a subcommand is missing, should return a function; Optional) function inst : _all () return inst . magicball end return inst end -- Tell Twillow where the module is. Should return your module class function module () return MagicBallModule end","title":"Finished Module"},{"location":"module-dev/python/","text":"Python Module Development Coming soon..","title":"Module Development with Python"},{"location":"module-dev/python/#python-module-development","text":"Coming soon..","title":"Python Module Development"},{"location":"tutorials/google-cse/","text":"Setting up Google CSE Make your custom search engine To make a new Google Custom Search Engine, first go to https://cse.google.com/cse Click on the \"New search engine\" button to create a new search engine. For the \"sites to search\" field, just put any website, such as wxllow.dev , as this will not matter. Select your language and name the search engine whatever you want and then create it! Configuring your new search engine Now, go to the control panel for your search engine and scroll down to \"Search the entire web\" and turn it on! This will allow your search engine to return results from the entire web. Getting your API Key Right below that, click the \"Get started\" button next to \"Custom Search JSON API\" to generate an API token in order to access results from our engine using Python. Go through the process in the newly opened tab and write down (not literally, just copy/paste it) your key somewhere. Go back to your control panel and copy the \"Search engine ID\" Add this to your config.toml file In your bot's directory, go into the config.toml file and add/modify these two fields with the information you copied: [module.search] google_api_key = 'YourAPIKey' google_cse_id = 'YourSearchEngineID' That's it Now restart your bot and test out the search command :)!","title":"Setting up Google CSE"},{"location":"tutorials/google-cse/#setting-up-google-cse","text":"","title":"Setting up Google CSE"},{"location":"tutorials/google-cse/#make-your-custom-search-engine","text":"To make a new Google Custom Search Engine, first go to https://cse.google.com/cse Click on the \"New search engine\" button to create a new search engine. For the \"sites to search\" field, just put any website, such as wxllow.dev , as this will not matter. Select your language and name the search engine whatever you want and then create it!","title":"Make your custom search engine"},{"location":"tutorials/google-cse/#configuring-your-new-search-engine","text":"Now, go to the control panel for your search engine and scroll down to \"Search the entire web\" and turn it on! This will allow your search engine to return results from the entire web.","title":"Configuring your new search engine"},{"location":"tutorials/google-cse/#getting-your-api-key","text":"Right below that, click the \"Get started\" button next to \"Custom Search JSON API\" to generate an API token in order to access results from our engine using Python. Go through the process in the newly opened tab and write down (not literally, just copy/paste it) your key somewhere. Go back to your control panel and copy the \"Search engine ID\"","title":"Getting your API Key"},{"location":"tutorials/google-cse/#add-this-to-your-configtoml-file","text":"In your bot's directory, go into the config.toml file and add/modify these two fields with the information you copied: [module.search] google_api_key = 'YourAPIKey' google_cse_id = 'YourSearchEngineID'","title":"Add this to your config.toml file"},{"location":"tutorials/google-cse/#thats-it","text":"Now restart your bot and test out the search command :)!","title":"That's it"}]}